The for Loop
The most common use we have for looping is when we want to execute some code for each item in a sequence. For this type of looping or iteration, we’ll use the for loop. The general structure for a for loop is:

for TEMP_VAR in SEQUENCE:
    pass
    The TEMP_VAR will be populated with each item as we iterate through the SEQUENCE and it will be available to us in the context of the loop. After the loop finishes one iteration, then the TEMP_VAR will be populated with the next item in the SEQUENCE, and the loop’s body will execute again. This process continues until we either hit a break statement or we’ve iterated over every item in the SEQUENCE. Here’s an example looping over a list of colors:

    >>> colors = ['blue', 'green', 'red', 'purple']
    >>> for color in colors:
    ...     print(color)
    ...
    blue
    green
    red
    purple
    >>> color
    'purple'
    If we didn't want to print out certain colors we could utilize the continue or break statements again. Let’s say we want to skip the string 'blue' and terminate the loop if we see the string 'red':

    >>> colors = ['blue', 'green', 'red', 'purple']
    >>> for color in colors:
    ...     if color == 'blue':
    ...         continue
    ...     elif color == 'red':
    ...         break
    ...     print(color)
    ...
    green
    >>>
    Other Iterable Types
    Lists will be the most common type that we iterate over using a for loop, but we can also iterate over other sequence types. Of the types we already know, we can iterate over strings, dictionaries, and tuples.

    Here’s a tuple example:

    >>> point = (2.1, 3.2, 7.6)
    >>> for value in point:
    ...     print(value)
    ...
    2.1
    3.2
    7.6
    >>>
    A dictionary example:

    >>> ages = {'kevin': 59, 'bob': 40, 'kayla': 21}
    >>> for key in ages:
    ...     print(key)
    ...
    kevin
    bob
    kayla
